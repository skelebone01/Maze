package sudoku;

/**
 *
 * @author Zeynep
 */
public class Sudoku {
        private static final int GRID_SIZE = 9;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
 int[][] board = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };
    
    Print(board);
    
    if (Solve(board)) {//if the board dose not have any problem send
      System.out.println("Solved successfully!");
    }
    else {
      System.out.println("Unsolvable board :(");
    }
    
    Print(board);
    
  }
      private static boolean Solve(int[][] board) {//this method is the main body that run the possiblites
    for (int row = 0; row < GRID_SIZE; row++) {
      for (int column = 0; column < GRID_SIZE; column++) {
        if (board[row][column] == 0) {
          for (int numberToTry = 1; numberToTry <= GRID_SIZE; numberToTry++) {
            if (Placement(board, numberToTry, row, column)) {
              board[row][column] = numberToTry;
              
              if (Solve(board)) {
                return true;
              }
              else {
                board[row][column] = 0;
              }
            }
          }
          return false;
        }
      }
    }
    return true;
  }
  
  
  private static void Print(int[][] board) {//code that prints the board 
    for (int row = 0; row < GRID_SIZE; row++) {
      if (row % 3 == 0 && row != 0) {
        System.out.println("");
      }
      for (int column = 0; column < GRID_SIZE; column++) {
        if (column % 3 == 0 && column != 0) {
          System.out.print("    ");
        }
        System.out.print(board[row][column]+" ");
      }
      System.out.println();
    }
  }


  private static boolean NumberRow(int[][] board, int number, int row) {//this methods checks the rows to look for a specifed number
    for (int i = 0; i < GRID_SIZE; i++) {
      if (board[row][i] == number) {
        return true;
      }
    }
    return false;
  }
  
  private static boolean NumberCol(int[][] board, int number, int column) {//this code checks the coulm for a specified number
    for (int i = 0; i < GRID_SIZE; i++) {
      if (board[i][column] == number) {
        return true;
      }
    }
    return false;
  }
  
  private static boolean NumberBox(int[][] board, int number, int row, int column) {//this code checks the 3x3 box numbers 
    int Rowbox = row - row % 3;//this he
    int Colmbox = column - column % 3;
    
    for (int i = Rowbox; i < Rowbox + 3; i++) {
      for (int j = Colmbox; j < Colmbox + 3; j++) {
        if (board[i][j] == number) {
          return true;
        }
      }
    }
    return false;
  }
  
  private static boolean Placement(int[][] board, int number, int row, int column) {
    return !NumberRow(board, number, row) &&
        !NumberCol(board, number, column) &&
        !NumberBox(board, number, row, column);
  }
  

  
  
  
}